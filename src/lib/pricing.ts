export type Currency = "AUD" | "USD" | "GBP" | "EUR" | "CAD" | "NZD";
export type Plan = "guest50" | "guest100" | "unlimited";

// Plan features and limits
export const planFeatures = {
  free: {
    name: "Free Plan",
    guestLimit: 10,
    albumLimit: 1,
    themeLimit: 1,
    uploadWindowMonths: 3,
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: false,
    publicAccess: true,
    supportLevel: "standard" as const,
  },
  guest50: {
    name: "50 Guest Plan",
    guestLimit: 50,
    albumLimit: 3,
    themeLimit: 5,
    uploadWindowMonths: 3,
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: true,
    publicAccess: true,
    supportLevel: "standard" as const,
  },
  guest100: {
    name: "100 Guest Plan",
    guestLimit: 100,
    albumLimit: 6,
    themeLimit: 10,
    uploadWindowMonths: 12,
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: true,
    publicAccess: true,
    supportLevel: "standard" as const,
  },
  unlimited: {
    name: "Unlimited Guest Plan",
    guestLimit: 999999,
    albumLimit: 12,
    themeLimit: 999999,
    uploadWindowMonths: 12,
    downloadWindowMonths: 12,
    customBranding: true,
    videoGuestbook: true,
    publicAccess: true,
    supportLevel: "dedicated" as const,
  },
};

// Pricing matrix (amounts in minor units - cents)
export const pricingMatrix = {
  guest50: { AUD: 5900, USD: 3900, GBP: 3100, EUR: 3600, CAD: 5300, NZD: 6300 },
  guest100: { AUD: 8900, USD: 5900, GBP: 4700, EUR: 5400, CAD: 7900, NZD: 9500 },
  unlimited: { AUD: 13400, USD: 8900, GBP: 7100, EUR: 8100, CAD: 11900, NZD: 14300 },
};

// Import the actual Stripe Price IDs generated by setup-stripe-products.js
import { stripePriceIds as generatedPriceIds } from './stripe-price-ids';

// Use the generated Price IDs from Stripe
export const stripePriceIds: Record<Plan, Record<Currency, string>> = generatedPriceIds;

export function getPriceId(plan: Plan, currency: Currency): string {
  return stripePriceIds[plan][currency];
}

export function formatCurrency(amountMinor: number, currency: Currency): string {
  const amount = amountMinor / 100;
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
  });
  return formatter.format(amount);
}

export function getPlanFeatures(plan: string) {
  return planFeatures[plan as keyof typeof planFeatures] || planFeatures.free;
}

export function getPrice(plan: Plan, currency: Currency): number {
  return pricingMatrix[plan][currency];
}

/**
 * Calculate the upgrade price difference between two plans
 */
export function getUpgradePrice(fromPlan: string, toPlan: Plan, currency: Currency): number {
  // Free plan has no cost
  if (fromPlan === 'free' || !fromPlan) {
    return getPrice(toPlan, currency);
  }
  
  // Can't upgrade to same or lower plan via delta pricing
  if (fromPlan === toPlan) {
    return 0;
  }
  
  // Check if fromPlan is a valid paid plan
  if (!(fromPlan in pricingMatrix)) {
    return getPrice(toPlan, currency);
  }
  
  const fromPrice = pricingMatrix[fromPlan as Plan][currency];
  const toPrice = pricingMatrix[toPlan][currency];
  
  // Return the difference (should always be positive for upgrades)
  return Math.max(0, toPrice - fromPrice);
}

/**
 * Check if one plan is higher than another
 */
export function isPlanUpgrade(fromPlan: string, toPlan: Plan): boolean {
  const planHierarchy = ['free', 'guest50', 'guest100', 'unlimited'];
  const fromIndex = planHierarchy.indexOf(fromPlan || 'free');
  const toIndex = planHierarchy.indexOf(toPlan);

  return toIndex > fromIndex;
}

/**
 * Get all available upgrade options for a given plan
 */
export function getAvailableUpgrades(currentPlan: string): Plan[] {
  const planHierarchy: (string | Plan)[] = ['free', 'guest50', 'guest100', 'unlimited'];
  const currentIndex = planHierarchy.indexOf(currentPlan || 'free');

  return planHierarchy.slice(currentIndex + 1) as Plan[];
}