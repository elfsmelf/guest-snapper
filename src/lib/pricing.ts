export type Currency = "AUD" | "USD" | "GBP" | "EUR" | "CAD" | "NZD";
export type Plan = "bliss" | "radiance" | "eternal";

// Plan features and limits
export const planFeatures = {
  free_trial: {
    name: "7-Day Free Trial",
    guestLimit: 999999, // unlimited guests
    albumLimit: 1,
    themeLimit: 1,
    uploadWindowMonths: 0, // Use uploadWindowDays instead for trial
    uploadWindowDays: 7, // 7 days for trial
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: true,
    publicAccess: true,
    multiLanguage: true,
    qrTemplates: true,
    supportLevel: "standard" as const,
  },
  bliss: {
    name: "Bliss",
    guestLimit: 999999, // unlimited guests
    albumLimit: 1, // main gallery only
    themeLimit: 1, // default theme
    uploadWindowMonths: 3,
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: true,
    publicAccess: true,
    multiLanguage: true,
    qrTemplates: true,
    supportLevel: "standard" as const,
  },
  radiance: {
    name: "Radiance",
    guestLimit: 999999, // unlimited guests
    albumLimit: 9, // 8 additional + main
    themeLimit: 25,
    uploadWindowMonths: 12,
    downloadWindowMonths: 12,
    customBranding: false,
    videoGuestbook: true,
    publicAccess: true,
    multiLanguage: true,
    qrTemplates: true,
    supportLevel: "priority" as const,
  },
  eternal: {
    name: "Eternal",
    guestLimit: 999999, // unlimited guests
    albumLimit: 16, // 15 additional + main
    themeLimit: 999999, // all themes
    uploadWindowMonths: 12,
    downloadWindowMonths: 12,
    customBranding: true,
    videoGuestbook: true,
    publicAccess: true,
    multiLanguage: true,
    qrTemplates: true,
    supportLevel: "dedicated" as const,
  },
};

// Pricing matrix (amounts in minor units - cents)
export const pricingMatrix = {
  bliss: { USD: 4900, AUD: 7400, GBP: 3900, EUR: 4500, CAD: 6600, NZD: 7900 },
  radiance: { USD: 7900, AUD: 11900, GBP: 6300, EUR: 7200, CAD: 10600, NZD: 12700 },
  eternal: { USD: 13900, AUD: 20900, GBP: 11100, EUR: 12700, CAD: 18600, NZD: 22400 },
};

// Import the actual Stripe Price IDs generated by setup-stripe-products.js
import { stripePriceIds as generatedPriceIds } from './stripe-price-ids';

// Use the generated Price IDs from Stripe
export const stripePriceIds: Record<Plan, Record<Currency, string>> = generatedPriceIds;

export function getPriceId(plan: Plan, currency: Currency): string {
  return stripePriceIds[plan][currency];
}

export function formatCurrency(amountMinor: number, currency: Currency): string {
  const amount = amountMinor / 100;
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
  });
  return formatter.format(amount);
}

export function getPlanFeatures(plan: string) {
  return planFeatures[plan as keyof typeof planFeatures] || planFeatures.free_trial;
}

export function getPrice(plan: Plan, currency: Currency): number {
  return pricingMatrix[plan][currency];
}

/**
 * Calculate the upgrade price difference between two plans
 */
export function getUpgradePrice(fromPlan: string, toPlan: Plan, currency: Currency): number {
  // Free plan has no cost
  if (fromPlan === 'free' || !fromPlan) {
    return getPrice(toPlan, currency);
  }
  
  // Can't upgrade to same or lower plan via delta pricing
  if (fromPlan === toPlan) {
    return 0;
  }
  
  // Check if fromPlan is a valid paid plan
  if (!(fromPlan in pricingMatrix)) {
    return getPrice(toPlan, currency);
  }
  
  const fromPrice = pricingMatrix[fromPlan as Plan][currency];
  const toPrice = pricingMatrix[toPlan][currency];
  
  // Return the difference (should always be positive for upgrades)
  return Math.max(0, toPrice - fromPrice);
}

/**
 * Check if one plan is higher than another
 */
export function isPlanUpgrade(fromPlan: string, toPlan: Plan): boolean {
  const planHierarchy = ['free_trial', 'bliss', 'radiance', 'eternal'];
  const fromIndex = planHierarchy.indexOf(fromPlan || 'free_trial');
  const toIndex = planHierarchy.indexOf(toPlan);

  return toIndex > fromIndex;
}

/**
 * Get all available upgrade options for a given plan
 */
export function getAvailableUpgrades(currentPlan: string): Plan[] {
  const planHierarchy: (string | Plan)[] = ['free_trial', 'bliss', 'radiance', 'eternal'];
  const currentIndex = planHierarchy.indexOf(currentPlan || 'free_trial');

  return planHierarchy.slice(currentIndex + 1) as Plan[];
}

/**
 * Calculate upload window end date based on plan
 * Handles both day-based (free trial) and month-based (paid plans) windows
 */
export function calculateUploadWindowEnd(plan: string, startDate: Date = new Date()): Date {
  const features = getPlanFeatures(plan);
  const endDate = new Date(startDate);

  // Check if plan has day-based window (free trial)
  if ('uploadWindowDays' in features && features.uploadWindowDays) {
    endDate.setDate(endDate.getDate() + features.uploadWindowDays);
  } else if (features.uploadWindowMonths) {
    // Month-based window for paid plans
    endDate.setMonth(endDate.getMonth() + features.uploadWindowMonths);
  }

  return endDate;
}

/**
 * Calculate download window end date based on plan
 */
export function calculateDownloadWindowEnd(plan: string, startDate: Date = new Date()): Date {
  const features = getPlanFeatures(plan);
  const endDate = new Date(startDate);
  endDate.setMonth(endDate.getMonth() + features.downloadWindowMonths);
  return endDate;
}